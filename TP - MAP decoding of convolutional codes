/* Log-domain BCJR MAP decoder for the rate-1/2, 4-state recursive
 * convolutional code with polynomials (1,1+D^2/1+D+D^2)
 */
 
#include "mex.h"
#include <math.h>
 
/* ---------------------------------------------------------------------
 * Useful constants
 * ---------------------------------------------------------------------*/
 
#define LOG_ZERO  (-1E6)
 
/* ---------------------------------------------------------------------
 * Function max_star: max_star(x,y) = log(exp(x)+exp(y))
 * ---------------------------------------------------------------------*/
 
#define FAST_MAX_STAR
 
double max_star (double x, double y)
{
#ifdef FAST_MAX_STAR    
    /* Fast calculation based on a two-piece linear approximation 
     * of log(1+exp(-|x|) */
    double xmy, z;
    xmy = fabs(x-y);
    z = (xmy > 2.5) ? 0 : 0.6 - 0.24*xmy;
    return (x > y) ? x+z : y+z;
#else
    /* Exact calculation, accurate but quite slow */
	double max_xy = (x > y) ? x : y;
	return max_xy + log(1.0+exp(-fabs(x-y)));
#endif
}
 
/* ---------------------------------------------------------------------
 * Internal decoding arrays
 * ---------------------------------------------------------------------*/
 
int N;						/* Size of the data sequence */
double *log_alpha;			/* 4xN array for storing forward metrics */
double *log_beta;			/* 4xN array for storing backward metrics */
double *log_gamma;			/* 8xN array for storing branch metrics */
 
/* ---------------------------------------------------------------------
 * Compute branch metrics log_gamma(m,b) for each transition (m,b)
 * ---------------------------------------------------------------------*/
void compute_log_gamma (double *La_D, double *L_X, double *L_Y)
{
	int i;
	for (i=0; i<N; i++)
	{
        /* TODO: Calculate branch metrics for the 8 transitions */
		log_gamma[8*i+2*0+0] = (-La_D[i] - L_X[i] - L_Y[i]) / 2;	/* branch D=0/XY=00 from state 0  0 0*/
		log_gamma[8*i+2*0+1] = (La_D[i] + L_X[i] + L_Y[i]) / 2;	/* branch D=1/XY=11 from state 0  0 1*/
		log_gamma[8*i+2*1+0] = (-La_D[i] - L_X[i] - L_Y[i]) / 2;	/* branch D=0/XY=00 from state 1  1 0*/
		log_gamma[8*i+2*1+1] = (La_D[i] + L_X[i] + L_Y[i]) / 2;	/* branch D=1/XY=11 from state 1  1 1*/
		log_gamma[8*i+2*2+0] = (-La_D[i] - L_X[i] + L_Y[i]) / 2;	/* branch D=0/XY=01 from state 2  2 0*/
		log_gamma[8*i+2*2+1] = (La_D[i] + L_X[i] - L_Y[i]) / 2;	/* branch D=1/XY=10 from state 2  2 1*/
		log_gamma[8*i+2*3+0] = (-La_D[i] - L_X[i] + L_Y[i]) / 2;	/* branch D=0/XY=01 from state 3  3 0*/
		log_gamma[8*i+2*3+1] = (La_D[i] + L_X[i] - L_Y[i]) / 2;	/* branch D=1/XY=10 from state 3  3 1*/
	}
 
#if 0
	mexPrintf("LOG_GAMMA:\n");
	for (i=0; i<N; i++)
		mexPrintf("i=%d: %f %f %f %f %f %f %f %f\n",i,
                log_gamma[8*i+2*0+0],log_gamma[8*i+2*0+1],
                log_gamma[8*i+2*1+0],log_gamma[8*i+2*1+1],
                log_gamma[8*i+2*2+0],log_gamma[8*i+2*2+1],
                log_gamma[8*i+2*3+0],log_gamma[8*i+2*3+1]);
	mexPrintf("\n");
#endif
}
 
/* ---------------------------------------------------------------------
 * Forward recursion
 * ---------------------------------------------------------------------*/
void compute_log_alpha ()
{
	int i;
 
	/* TODO: Setup initial condition */
	log_alpha[0] = 0;
	log_alpha[1] = LOG_ZERO;
	log_alpha[2] = LOG_ZERO;
	log_alpha[3] = LOG_ZERO;
 
	for (i=1; i<N; i++)
	{
        double normfac;
 
		/* TODO: Recursive computation of log(alpha) */
		log_alpha[4*i+0] = max_star(log_alpha[4*(i-1)+0] + log_gamma[8*(i-1)+2*0+0], log_alpha[4*(i-1)+1] + log_gamma[8*(i-1)+2*1+1]);
		log_alpha[4*i+1] = max_star(log_alpha[4*(i-1)+2] + log_gamma[8*(i-1)+2*2+1], log_alpha[4*(i-1)+3] + log_gamma[8*(i-1)+2*3+0]);
		log_alpha[4*i+2] = max_star(log_alpha[4*(i-1)+0] + log_gamma[8*(i-1)+2*0+1],log_alpha[4*(i-1)+1] + log_gamma[8*(i-1)+2*1+0]);
		log_alpha[4*i+3] = max_star(log_alpha[4*(i-1)+2] + log_gamma[8*(i-1)+2*2+0],log_alpha[4*(i-1)+3] + log_gamma[8*(i-1)+2*3+1]);
 
		/* Metric normalisation */
		normfac = max_star(log_alpha[4*i+0], log_alpha[4*i+1]);
		normfac = max_star(log_alpha[4*i+2], normfac);
		normfac = max_star(log_alpha[4*i+3], normfac);
		log_alpha[4*i+0] -= normfac;
		log_alpha[4*i+1] -= normfac;
		log_alpha[4*i+2] -= normfac;
		log_alpha[4*i+3] -= normfac;
	}
#if 0	
	mexPrintf("LOG_ALPHA\n");
	for (i=0; i<N; i++)
		mexPrintf("i=%d: %f %f %f %f\n",i,log_alpha[4*i+0],log_alpha[4*i+1],log_alpha[4*i+2],log_alpha[4*i+3]);
	mexPrintf("\n");
#endif
}
 
/* ---------------------------------------------------------------------
 * Backward recursion 
 * ---------------------------------------------------------------------*/
void compute_log_beta ()
{
	int i;
 
	/* TODO: Setup final condition */
	log_beta[4*N+0] = log(0.25);
	log_beta[4*N+1] = log(0.25);
	log_beta[4*N+2] = log(0.25);
	log_beta[4*N+3] = log(0.25);
 
	for (i=N-1; i>=0; i--)
	{
		double normfac;
 
		/* TODO: Recursive computation of log(beta) */
		log_beta[4*i+0] = max_star(log_gamma[8*i+2*0+0] + log_beta[4*(i+1)+0],log_gamma[8*i+2*0+1] + log_beta[4*(i+1)+2]) ;
		log_beta[4*i+1] = max_star(log_gamma[8*i+2*1+1] + log_beta[4*(i+1)+0],log_gamma[8*i+2*1+0] + log_beta[4*(i+1)+2]);
		log_beta[4*i+2] = max_star(log_gamma[8*i+2*2+1] + log_beta[4*(i+1)+1],log_gamma[8*i+2*2+0] + log_beta[4*(i+1)+3]);
		log_beta[4*i+3] = max_star(log_gamma[8*i+2*3+0] + log_beta[4*(i+1)+1],log_gamma[8*i+2*3+1] + log_beta[4*(i+1)+3]);
 
		/* Metric normalization */
		normfac = max_star(log_beta[4*i+0], log_beta[4*i+1]);
		normfac = max_star(log_beta[4*i+2], normfac);
		normfac = max_star(log_beta[4*i+3], normfac);
		log_beta[4*i+0] -= normfac;
		log_beta[4*i+1] -= normfac;
		log_beta[4*i+2] -= normfac;
		log_beta[4*i+3] -= normfac;
	}
#if 0
	mexPrintf("LOG_BETA\n");
	for (i=0; i<N; i++)
		mexPrintf("i=%d: %f %f %f %f\n",i,log_beta[4*i+0],log_beta[4*i+1],log_beta[4*i+2],log_beta[4*i+3]);
	mexPrintf("\n");
#endif	
}
/* ---------------------------------------------------------------------
 * Core routine for the MAP decoder 
 * ---------------------------------------------------------------------*/
void decode (double *La_D, double *L_X, double *L_Y, double *L_D)
{
	int i;
 
	compute_log_gamma(La_D, L_X, L_Y);
	compute_log_alpha();
	compute_log_beta();
 
	for (i=0; i<N; i++)
	{
        /* TODO: Compute soft-decision L_D[i] on each data bit d_i */
		L_D[i] = max_star(max_star(max_star(log_alpha[4*i+0] + log_gamma[8*i+2*0+1] + log_beta[4*(i+1)+2],
						log_alpha[4*i+1] + log_gamma[8*i+2*1+1] + log_beta[4*(i+1)+0]),
						log_alpha[4*i+2] + log_gamma[8*i+2*2+1] + log_beta[4*(i+1)+1]),
						log_alpha[4*i+3] + log_gamma[8*i+2*3+1] + log_beta[4*(i+1)+3])
				- max_star(max_star(max_star(log_alpha[4*i+0] + log_gamma[8*i+2*0+0] + log_beta[4*(i+1)+0],
						log_alpha[4*i+1] + log_gamma[8*i+2*1+0] + log_beta[4*(i+1)+2]),
						log_alpha[4*i+2] + log_gamma[8*i+2*2+0] + log_beta[4*(i+1)+3]),
						log_alpha[4*i+3] + log_gamma[8*i+2*3+0] + log_beta[4*(i+1)+1]);
	}
}
 
/* ---------------------------------------------------------------------
 * Main function (called by Matlab interpreter)
 * ---------------------------------------------------------------------*/
void mexFunction(
    int nlhs, mxArray *plhs[],
    int nrhs, const mxArray *prhs[])
{
	int nrow, ncol;
	double *La_D, *L_D, *L_X, *L_Y;
 
	/* Check input arguments */
	if (nrhs != 3)
		mexErrMsgTxt("3 arguments required at the decoder input");
 
	/* Obtain the length of the data sequence from the input arguments */
	nrow = mxGetM(prhs[0]);
	ncol = mxGetN(prhs[0]);
	N = nrow*ncol;
 
	/* Pointers on the input vectors */
	La_D = mxGetPr(prhs[0]);
	L_X = mxGetPr(prhs[1]);
	L_Y = mxGetPr(prhs[2]);
 
	/* Create output vector for soft-decisions */
	plhs[0] = mxCreateDoubleMatrix(nrow, ncol, mxREAL);
	L_D = mxGetPr(plhs[0]);
 
	/* Allocate internal decoding arrays */
	log_gamma = (double*) mxCalloc(8*N,sizeof(double));
	log_alpha = (double*) mxCalloc(4*N,sizeof(double));
	log_beta  = (double*) mxCalloc(4*(N+1),sizeof(double));
 
	/* Decode the received sequence */
	decode(La_D, L_X, L_Y, L_D);
 
	/* Free internal decoding arrays */
	mxFree(log_gamma);
	mxFree(log_alpha);
	mxFree(log_beta);
}
